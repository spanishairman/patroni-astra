---
- name: PostgreSQL | Group of servers "psqlserver". Install packages "postgresql", "acl" on the "psqlserver" server group
  hosts: psqlserver
  become: true
  tasks:

    - name: PostgreSQL. Add the user 'ejabberd' with a bash shell
      ansible.builtin.user:
        name: ejabberd
        password: '!'
        comment: Ejabberd User
        shell: /bin/bash
        create_home: yes

    - name: PostgreSQL. Add the user 'replica_role' with a bash shell
      ansible.builtin.user:
        name: replica_role
        password: '!'
        comment: Replica Role
        shell: /bin/bash
        create_home: yes

    - name: PostgreSQL. Add the user 'super_role' with a bash shell
      ansible.builtin.user:
        name: super_role
        password: '!'
        comment: Super Role for Patroni
        shell: /bin/bash
        create_home: yes

    - name: APT. Update the repository cache and install packages "postgresql", "python3-psycopg2", "acl" to latest version
      ansible.builtin.apt:
        name: postgresql,python3-psycopg2,acl
        state: present
        update_cache: yes

    - name: Config. Bash. Edit postgresql.conf for enable all interfaces. Разрешаем входящие подключения к порту 5432 на всех интерфейсах.
      ansible.builtin.shell: |
        echo "listen_addresses = '*'" >> postgresql.conf
        systemctl restart postgresql
      args:
        executable: /bin/bash
        chdir: /etc/postgresql/11/main/

    - name: Config. Bash. Edit postgresql.conf configuration file
      ansible.builtin.shell: |
        sed -i 's/#wal_level = replica/wal_level = replica/' postgresql.conf
        sed -i 's/#max_wal_senders = 10/#max_wal_senders = 10/' postgresql.conf
        sed -i 's/#max_replication_slots = 10/max_replication_slots = 10/' postgresql.conf
        sed -i 's/#wal_keep_size = 0/wal_keep_size = 100/' postgresql.conf
        sed -i 's/#max_slot_wal_keep_size = -1/max_slot_wal_keep_size = -1/' postgresql.conf
        sed -i 's/#wal_sender_timeout = 60s/wal_sender_timeout = 60s/' postgresql.conf
        sed -i 's/#track_commit_timestamp = off/track_commit_timestamp = off/' postgresql.conf
        sed -i 's/#archive_mode = off/archive_mode = on/' postgresql.conf
        echo '# Archive and restore commsnfs' >> postgresql.conf
        echo "# archive_command = 'test ! -f /mnt/nfs/$HOSTNAME/archive/%f && cp %p /mnt/nfs/$HOSTNAME/archive/%f'" >> postgresql.conf
        echo "# restore_command = 'cp /mnt/nfs/$HOSTNAME/archive/%f %p'" >> postgresql.conf
        echo "host    all             super_role             127.0.1.1/32            md5" >> pg_hba.conf
        systemctl restart postgresql
      args:
        executable: /bin/bash
        chdir: /etc/postgresql/11/main/

    - name: Config. Give the postgres user rights to read the mandatory access control database
      ansible.builtin.shell: |
        usermod -a -G shadow postgres
        setfacl -d -m u:postgres:r /etc/parsec/macdb
        setfacl -R -m u:postgres:r /etc/parsec/macdb
        setfacl -m u:postgres:rx /etc/parsec/macdb
        setfacl -d -m u:postgres:r /etc/parsec/capdb
        setfacl -R -m u:postgres:r /etc/parsec/capdb
        setfacl -m u:postgres:rx /etc/parsec/capdb
        pdpl-user -l 0:0 ejabberd
        pdpl-user -l 0:0 replica_role
        pdpl-user -l 0:0 super_role
        systemctl restart postgresql
      args:
        executable: /bin/bash

    - name: Config. Edit pg_hba configuration file. Add haproxy access. Открываем доступ с первой ноды proxy-сервера к базе ejabberd-domain-local для пользователя ejabberd.
      postgresql_pg_hba:
        dest: /etc/postgresql/11/main/pg_hba.conf
        contype: host
        users: ejabberd
        source: 192.168.1.6
        databases: ejabberd-domain-local
        method: md5
        create: true

    - name: Config. Edit pg_hba configuration file. Add haproxy access. Открываем доступ со второй ноды proxy-сервера к базе ejabberd-domain-local для пользователя ejabberd.
      postgresql_pg_hba:
        dest: /etc/postgresql/11/main/pg_hba.conf
        contype: host
        users: ejabberd
        source: 192.168.1.7
        databases: ejabberd-domain-local
        method: md5
        create: true

- name: PostgreSQL | Primary Server. Configuration access for replication. Add roles.
  hosts: psql1server
  become: true
  become_user: postgres
  vars:
    allow_world_readable_tmpfiles: true
  tasks:
    - name: Edit pg_hba configuration file. Access for Replica from psql2server.
      postgresql_pg_hba:
        dest: /etc/postgresql/11/main/pg_hba.conf
        contype: host
        users: replica_role
        source: 192.168.1.4
        databases: replication
        method: md5
        create: true

    - name: Create "replica_role" user with REPLICATION attributes for connection from Replica node.
      community.postgresql.postgresql_user:
        name: replica_role
        password: Inc0gn1t0
        expires: "infinity"
        role_attr_flags: REPLICATION,LOGIN

    - name: Create "super_role" user with SUPERUSER attributes.
      community.postgresql.postgresql_user:
        name: super_role
        password: Inc0gn1t0
        expires: "infinity"
        role_attr_flags: SUPERUSER,LOGIN

- name: PostgreSQL | Primary Server. Configuration access for replication. Reload cofig
  hosts: psql1server
  become: true
  tasks:
    - name: Reload service
      ansible.builtin.shell: |
        systemctl restart postgresql
      args:
        executable: /bin/bash

- name: PostgreSQL | Secondary Server. Configuration WAL and access for replication.
  hosts: psql2server
  become: true
  become_user: postgres
  tasks:
    - name: Edit pg_hba configuration file. Access for Replica from psql1server.
      postgresql_pg_hba:
        dest: /etc/postgresql/11/main/pg_hba.conf
        contype: host
        users: replica_role
        source: 192.168.1.3
        databases: replication
        method: md5
        create: true

- name: PostgreSQL | Secondary Server. Configuration a Replica server and start replication.
  hosts: psql2server
  become: true
  vars:
    allow_world_readable_tmpfiles: true
  tasks:
    - name: Config. Bash. Stop postgresql service, remove work directory. Set PGPASSWORD variable, start replication.
      ansible.builtin.shell: |
        systemctl stop postgresql
        rm -rf /var/lib/postgresql/11/main
        PGPASSWORD=Inc0gn1t0
        export PGPASSWORD
        pg_basebackup -h 192.168.1.3 -U replica_role -X stream -R -P -D /var/lib/postgresql/11/main
        chown -R postgres: /var/lib/postgresql/11/main
        systemctl start postgresql
      args:
        executable: /bin/bash

- name: PostgreSQL | psqlserver servers group. Get for replication status.
  hosts: psqlserver
  become: true
  become_user: postgres
  tasks:
    - name: Get replica status.
      command: psql -c 'SELECT client_addr, state FROM pg_stat_replication;'
      register: status
    - debug: var=status.stdout_lines

- name: PostgreSQL | Primary Server. Create database "ejabberd_domain_local" and role "ejabberd" on the Primary.
  hosts: psql1server
  become: true
  become_user: postgres
  vars:
    allow_world_readable_tmpfiles: true
  tasks:

    - name: Create a new database with name "ejabberd-domain-local".
      community.postgresql.postgresql_db:
        name: ejabberd-domain-local
        comment: "eJabberd database"

    - name: Connect to eJabberd database, create "ejabberd" user, and grant access to database and all tables.
      community.postgresql.postgresql_user:
        db: ejabberd-domain-local
        name: ejabberd
        password: Inc0gn1t0
        expires: "infinity"

    - name: Connect to eJabberd database, grant privileges on "ejabberd-domain-local" database objects (database) for "ejabberd" role.
      community.postgresql.postgresql_privs:
        database: ejabberd-domain-local
        state: present
        privs: ALL
        type: database
        roles: ejabberd

    - name: Connect to eJabberd database, grant privileges on "ejabberd-domain-local" database objects (schema) for "ejabberd" role.
      community.postgresql.postgresql_privs:
        database: ejabberd-domain-local
        state: present
        privs: CREATE
        type: schema
        objs: public
        roles: ejabberd
